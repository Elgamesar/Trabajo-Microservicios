@page "/order"
@rendermode InteractiveServer
@using WebClient.DTOs
@using WebClient.Services
@inject ICustomerApiService CustomerService
@inject IProductApiService ProductService
@inject IOrderApiService OrderService

<h3>Order Creation</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isError ? "alert-danger" : "alert-success")" role="alert">
        @message
    </div>
}

<div class="mb-3">
    <label for="customer" class="form-label">Select Customer</label>
    <select id="customer" class="form-select" @bind="selectedCustomerId">
        <option value="0">Select a customer...</option>
        @foreach (var customer in customers)
        {
            <option value="@customer.Id">@customer.Name (@customer.Email)</option>
        }
    </select>
</div>

<div class="mb-3">
    <h4>Add Products</h4>
    <div class="row">
        <div class="col-md-4">
            <select class="form-select" @bind="selectedProductId">
                <option value="0">Select a product...</option>
                @foreach (var product in products)
                {
                    <option value="@product.Id">@product.Name ($@product.Price) - Stock: @product.Stock</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <input type="number" class="form-control" @bind="quantity" min="1" max="@(selectedProductId != 0 ? products.FirstOrDefault(p => p.Id == selectedProductId)?.Stock - orderItems.Where(i => i.Product.Id == selectedProductId).Sum(i => i.Quantity) ?? 0 : 0)" />
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary" @onclick="AddProductToOrder" disabled="@(!CanAddProduct())">
                Add
            </button>
        </div>
    </div>
    @if (selectedProductId != 0)
    {
        var product = products.FirstOrDefault(p => p.Id == selectedProductId);
        var currentOrderQuantity = orderItems
            .Where(i => i.Product.Id == selectedProductId)
            .Sum(i => i.Quantity);
        var remainingStock = product?.Stock - currentOrderQuantity ?? 0;

        <div class="row mt-2">
            <div class="col">
                <small class="text-muted">Available stock: @remainingStock</small>
            </div>
        </div>
    }
</div>

@if (orderItems.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Unit Price</th>
                <th>Quantity</th>
                <th>Subtotal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in orderItems)
            {
                <tr>
                    <td>@item.Product.Name</td>
                    <td>$@item.Product.Price</td>
                    <td>@item.Quantity</td>
                    <td>$@(item.Product.Price * item.Quantity)</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item)">
                            Remove
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="3" class="text-end"><strong>Total:</strong></td>
                <td>$@orderItems.Sum(i => i.Product.Price * i.Quantity)</td>
                <td colspan="2"></td>
            </tr>
        </tfoot>
    </table>
    <div class="mt-3">
        <button class="btn btn-success" @onclick="SubmitOrder" disabled="@(!CanSubmitOrder())">
            Submit Order
        </button>
    </div>
}

@code {
    private List<Customer> customers = new();
    private List<Product> products = new();
    private int selectedCustomerId;
    private int selectedProductId;
    private int quantity = 1;
    private List<OrderItem> orderItems = new();
    private string message = "";
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        var customersResponse = await CustomerService.GetAllCustomersAsync();
        var productsResponse = await ProductService.GetAllProductsAsync();

        if (customersResponse.IsSuccessStatusCode && customersResponse.Content != null)
        {
            customers = await customersResponse.Content.ReadFromJsonAsync<List<Customer>>() ?? new();
        }

        if (productsResponse.IsSuccessStatusCode && productsResponse.Content != null)
        {
            products = await productsResponse.Content.ReadFromJsonAsync<List<Product>>() ?? new();
        }
    }

    private bool CanAddProduct()
    {
        if (selectedProductId == 0 || quantity < 1) return false;
        var product = products.FirstOrDefault(p => p.Id == selectedProductId);
        if (product == null) return false;
        
        // Check available stock
        var currentOrderQuantity = orderItems
            .Where(i => i.Product.Id == selectedProductId)
            .Sum(i => i.Quantity);
            
        return (currentOrderQuantity + quantity) <= product.Stock;
    }

    private void AddProductToOrder()
    {
        var product = products.FirstOrDefault(p => p.Id == selectedProductId);
        if (product != null && CanAddProduct())
        {
            orderItems.Add(new OrderItem { Product = product, Quantity = quantity });
            selectedProductId = 0;
            quantity = 1;
        }
    }

    private void RemoveItem(OrderItem item)
    {
        orderItems.Remove(item);
    }

    private bool CanSubmitOrder()
    {
        return selectedCustomerId != 0 && orderItems.Any();
    }

    private async Task SubmitOrder()
    {
        try
        {
            var createOrderDto = new CreateOrderDto
            {
                CustomerId = selectedCustomerId,
                Items = orderItems.Select(item => new OrderItemDto
                {
                    ProductId = item.Product.Id,
                    Quantity = item.Quantity
                }).ToList()
            };

           

            var response = await OrderService.CreateOrderAsync(createOrderDto);
            
            

            if (response.IsSuccessStatusCode)
            {
                message = "Order created successfully!, you can now see the order on orders history";
                isError = false;
                // Reset form
                selectedCustomerId = 0;
                orderItems.Clear();
            }
            else
            {
                message = "Failed to create order. Please try again.";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isError = true;
        }
    }

    private class OrderItem
    {
        public Product Product { get; set; }
        public int Quantity { get; set; }
    }
}
